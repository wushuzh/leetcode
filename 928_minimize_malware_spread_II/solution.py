from typing import List
from unionfind import UnionFind
import collections


def min_malware_spread_II_using_unionfind(graph: List[List[int]],
                                          initial: List[int]) -> int:
    N = len(graph)
    clean = set(list(range(N))) - set(initial)

    uf = UnionFind(N)

    for i in clean:
        for j in clean:
            if graph[i][j]:
                uf.union(i, j)

    # global view from virus
    #  one virus can impact which groups: id by root of a group
    impact_clean_nodes = collections.defaultdict(set)
    for v in initial:
        for i in clean:
            if graph[v][i]:
                impact_clean_nodes[v].add(uf.find_root(i))

    # global view from clean node
    #  one clean node can be impacted by how many virus
    impact_clean_counts = collections.Counter()
    for v in initial:
        for i in impact_clean_nodes[v]:
            impact_clean_counts[i] += 1

    max_impact_num = -1
    ans = min(initial)
    # loop with each virus to see
    #   how many groups it can independently impact
    for v, some_clean_nodes in impact_clean_nodes.items():
        cnt = 0
        for i in some_clean_nodes:
            if impact_clean_counts[i] == 1:
                cnt += uf.sz[i]

        if cnt > max_impact_num or (cnt == max_impact_num and v < ans):
            max_impact_num = cnt
            ans = v

    return ans
